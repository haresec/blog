<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://haresec.github.io/blog</id>
    <title></title>
    <updated>2022-03-02T04:10:51.161Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://haresec.github.io/blog"/>
    <link rel="self" href="https://haresec.github.io/blog/atom.xml"/>
    <logo>https://haresec.github.io/blog/images/avatar.png</logo>
    <icon>https://haresec.github.io/blog/favicon.ico</icon>
    <rights>All rights reserved 2022, </rights>
    <entry>
        <title type="html"><![CDATA[Javase-数组]]></title>
        <id>https://haresec.github.io/blog/post/javase-shu-zu/</id>
        <link href="https://haresec.github.io/blog/post/javase-shu-zu/">
        </link>
        <updated>2021-12-14T12:28:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="数组">数组</h1>
<p>数组是一个最简单的数据结构</p>
<h1 id="数组概述">数组概述</h1>
<p>数组时相同类型数据的有序集合<br>
数组描述的是相同类型的若干个数据，按照一定的先后次序排列组合而成<br>
其中每一个数据称做一个数组元素，每个数组元素可以通过一个下标来访问他们</p>
<h1 id="数组声明创建">数组声明创建</h1>
<p>首先必须先声明数组变量，才能在程序中使用数组。<br>
dataType[] arrayRefVar;		//首选方法</p>
<p>dataType arrayRefVar[];		//效果相同，但不是首选方法</p>
<h1 id="java语言使用new操作符创建数组语法如下">Java语言使用new操作符创建数组，语法如下：</h1>
<p>dataType[] arrayRefVar = new dataType[arraySize];</p>
<p>public static void main(String[] args) {</p>
<pre><code>    // 声明数组
    int[] nums;     //定义，Java中建议在类型后面添加中括号代表数组
    int nums2[];    //c、c++类型定义数组的方式

    //创建数组
    nums = new int[10];     //可以存放10个int类型的元素

    nums[0] = 1;
    nums[1] = 2;
    nums[2] = 3;
    nums[3] = 4;
    nums[4] = 5;
    nums[5] = 6;
    nums[6] = 7;
    nums[7] = 8;
    nums[8] = 9;
    nums[9] = 10;

    int sum = 0;
    for (int i =0; i &lt; nums.length; i++){
        sum += nums[i];

    }
    System.out.println(&quot;总和为：&quot; + sum);

}
</code></pre>
<h1 id="静态初始化">静态初始化</h1>
<p>int[] a = {1, 2, 3};<br>
Man[] mans = {new Man(1,1), new Man(2,2)};</p>
<h1 id="动态初始化">动态初始化</h1>
<p>int[] a = new int[2];<br>
a[0]=1;<br>
a[1]=2;</p>
<h1 id="数组默认初始化">数组默认初始化</h1>
<p>数组是引用类型，他的元素相当于累的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化<br>
public static void main(String[] args) {<br>
//静态初始化：创建+赋值<br>
int[] a = {1, 2, 3, 4, 5};     //一旦定义不可改变<br>
System.out.println(a[0]);</p>
<pre><code>    //动态初始化:声明数组时并未直接进行赋值
    int[] b = new int[10];
    b[0] = 10;
    System.out.println(b[0]);
    System.out.println(b[1]);


    //默认初始化：数组是一个引用类型，数组一经声明都会有默认初始值，一旦被实例化分配内存空间后都会隐式赋值
}
</code></pre>
<h1 id="数组的四个基本特点">数组的四个基本特点</h1>
<p>数组一旦被创建它的大小就是不可以改变的<br>
数组中的元素必须是相同类型，不能出现其他类型<br>
数组中的元素可以是任何数据类型，包括八大基本类型和引用类型（比如类的实例化对象）<br>
数组变量属于引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。数组对象存在于堆中</p>
<h1 id="数组边界">数组边界</h1>
<p>数组的下标为[0, length-1]，如果越界会报 ArrayIndexOutOfBoundsException 数组下标异常<br>
数组小结<br>
数组是相同数据类型（数据类型可以为任何类型）的有序集合<br>
数组也是对象。数组元素相当于对象的成员变量<br>
数组一旦被创建，其长度是确定的。<br>
数组使用<br>
for-each循环遍历数组<br>
//JDK1.5  没有下标  数组中的每一个元素 : 数组<br>
//直接遍历数组<br>
for (int array : arrays) {<br>
System.out.println(array);<br>
}</p>
<p>数组作为参数&amp;&amp;返回值<br>
public static void main(String[] args) {</p>
<pre><code>    int[] arrays = {1, 2, 3, 4, 5};

 
    int[] result = reverseArray(arrays);
    printArray(result);

}
//反转数组: 数组作为返回值
public static int[] reverseArray(int[] array){
    int[] result = new int[array.length];

    //反转操作
    for (int i = 0, j=result.length - 1; i &lt; array.length; i++,j--) {
        result[j] = array[i];
    }


    return result;
}

//打印数组元素：数组作为传递给方法
public static void printArray(int[] array){
    for (int i = 0; i &lt; array.length; i++) {
        System.out.print(array[i] + &quot;   &quot;);
    }
}
</code></pre>
<h1 id="多维数组">多维数组</h1>
<p>多为数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，该二维数组中的每个元素都是一个一维数组。<br>
二维数组<br>
2行5列的数组<br>
int a[][] = new int[2][5];</p>
<p>Arrays类<br>
操作数组的类<br>
Arrays.toString()<br>
public static void main(String[] args) {</p>
<pre><code>    int[] a = {1, 2, 3, 4, 5, 6, 47, 365, 456746, 234, 234234, 785};

    System.out.println(a);      //打印值为数组对象的hashcode

    System.out.println(Arrays.toString(a));     //打印正常数组

    printArray(a);

    System.out.println(&quot;===================数组排序===================&quot;);

    Arrays.sort(a);     //对数组进行升序排序

    System.out.println(Arrays.toString(a));
}

//打印数组
public static void printArray(int[] a){
    System.out.print(&quot;[&quot;);
    for (int i = 0; i &lt; a.length; i++) {
        if (i == a.length - 1){
            System.out.print(a[i]);
        }else {
            System.out.print(a[i] + &quot;, &quot;);
        }

    }
    System.out.println(&quot;]&quot;);
}
</code></pre>
<h1 id="稀疏数组">稀疏数组</h1>
<p>压缩数组便于保存<br>
package com.Zh1z3ven.array;</p>
<p>public class ArrayDemo08 {<br>
public static void main(String[] args) {</p>
<pre><code>    int[][] array1 = new int[11][11];
    array1[1][2] = 1;
    array1[2][3] = 2;

    System.out.println(&quot;输出原始数组&quot;);

    for (int[] ints : array1) {
        for (int anInt : ints) {
            System.out.print(anInt + &quot;\t&quot;);
        }
        System.out.println();
    }

    //转为细数数组
    //获取有效值的个数
    int sum = 0;
    for (int i = 0; i &lt; 11; i++) {
        for (int j = 0; j &lt; 11; j++) {
            if (array1[i][j]!=0){
                sum++;
            }
        }
    }
    System.out.println(&quot;有效值的个数：&quot; + sum);

    //创建一个稀疏数组
    int[][] array2 = new int[sum+1][3];
    array2[0][0] = 11;
    array2[0][1] = 11;
    array2[0][2] = sum;

    //遍历二维数组，将非零的值存放在稀疏数组中
    int count = 0;
    for (int i = 0; i &lt; array1.length; i++) {
        for (int j = 0; j &lt; array1[i].length; j++) {
            if (array1[i][j] != 0){
                count++;
                array2[count][0] = i;       //行
                array2[count][1] = j;       //列
                array2[count][2] = array1[i][j];
            }
        }

    }

    System.out.println(&quot;稀疏数组&quot;);
    for (int i = 0; i &lt; array2.length; i++) {
        System.out.println(array2[i][0] + &quot;\t&quot;
        +array2[i][1] + &quot;\t&quot;
        +array2[i][2] + &quot;\t&quot;);



    }

    //读取稀疏数组
    int[][] array3 = new int[array2[0][0]][array2[0][1]];

    for (int i = 1; i &lt; array2.length; i++) {
        array3[array2[i][0]][array2[i][1]] = array2[i][2];
    }

    //打印
    System.out.println(&quot;还原稀疏数组&quot;);

    for (int[] ints : array3) {
        for (int anInt : ints) {
            System.out.print(anInt + &quot;\t&quot;);
        }
        System.out.println();
    }
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Javase-方法]]></title>
        <id>https://haresec.github.io/blog/post/javase-fang-fa/</id>
        <link href="https://haresec.github.io/blog/post/javase-fang-fa/">
        </link>
        <updated>2021-12-14T12:18:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="何谓方法">何谓方法</h1>
<p>system.out.println,那么它是什么呢？<br>
调用系统类里面标准输出对象out中的方法叫做println方法</p>
<p>Java方法是语句的集合，它们在一起执行一个功能。<br>
方法是解决一类问题的步骤有序组合<br>
方法包含与类或对象中<br>
方法在程序中被创建，在其他地方被引用</p>
<p>设计方法的原则：方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法得的原子性，也就是一个方法只完成一个功能，这样利于我们后期的扩展。</p>
<p>回顾方法命名规则：首字母小写驼峰命名</p>
<h1 id="方法的定义及调用">方法的定义及调用</h1>
<p>方法定义格式：<br>
修饰符 返回值类型 方法名（参数类型 参数名）{<br>
代码<br>
return 返回值;<br>
}</p>
<p>返回值类型：void类型为无类型，所以如果定义返回值类型为void，reurn不需要填写</p>
<p>方法名：为我们定义的方法起名，满足标识符的规范，用来调用方法。<br>
参数列表： 可填写传入参数 参数前面必须携带参数变量类型。</p>
<p>return：方法结束。返回值类型是void，如果在返回值定义其他类型，return返回的结果也必须是返回值类型所填写的类型</p>
<p>public static void main(String[] args) {<br>
show();<br>
}<br>
public static void show(){<br>
System.out.println(&quot;方法&quot;);<br>
}</p>
<p>定义完方法后，方法是会默认加载的，我们还需要在main方法里面去调用该方法。</p>
<h1 id="定义方法注意事项">定义方法注意事项#</h1>
<p>方法必须定义在一类中方法外<br>
方法不能定义在另一个方法的里面<br>
return 0; 		可以终止方法<br>
方法重载<br>
重载就是在一个类中，有相同的函数名称，但形参不同的函数。</p>
<p>方法的重载规则：<br>
方法名称必须相同。<br>
参数列表必须不同（个数不同、或类型不同、参数排列顺序不同等）。<br>
方法返回类型可以相同也可以不相同。<br>
仅仅返回类型不同不足以称为方法的重载。</p>
<p>实现理论：<br>
方法名称相同时，编译器会根据调用方法的参数个数、参数类型等驱逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。</p>
<h1 id="命令行传参">命令行传参</h1>
<p>有时候你希望运行一个程序时候在传递给它消息。这要靠命令行传参数给main()函数实现<br>
public class CommandLine{<br>
public static void main(String[] args){<br>
for(int i=0;i&lt;args.length;i++){<br>
System.out.println(&quot;args[&quot;+i+&quot;]:&quot; + args[i])<br>
}<br>
}<br>
}</p>
<p>可变参数<br>
不定项参数<br>
在方法声明中，在指定参数类型后加一个省略号(...)。<br>
一个方法中旨在指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。<br>
package com.study.method;</p>
<p>public class Demo04 {<br>
public static void main(String[] args) {<br>
Demo04 demo04 = new Demo04();<br>
demo04.test(1,2,3,4,5);<br>
}<br>
public void test(int...i){<br>
System.out.println(i[0]);<br>
System.out.println(i[1]);<br>
System.out.println(i[2]);<br>
System.out.println(i[3]);<br>
System.out.println(i[4]);<br>
}<br>
}</p>
<h1 id="递归">递归</h1>
<p>递归结构包括两部分：<br>
递归头：什么时候不调用自身方法。如果没有头，将陷入死循环。<br>
递归体：什么时候需要调用自身方法。<br>
package com.study.method;</p>
<p>public class Demo06 {<br>
public static void main(String[] args) {<br>
System.out.println(f(5));<br>
}<br>
public static int f(int n){<br>
if (n == 1){<br>
return 1;<br>
}else {<br>
return n*f(n-1);<br>
}<br>
}<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Javase-流程控制]]></title>
        <id>https://haresec.github.io/blog/post/javase-liu-cheng-kong-zhi/</id>
        <link href="https://haresec.github.io/blog/post/javase-liu-cheng-kong-zhi/">
        </link>
        <updated>2021-12-14T10:48:27.000Z</updated>
        <content type="html"><![CDATA[<h1 id="流程控制语句">流程控制语句</h1>
<p>一个程序里面必不可少的就是流程控制，流程控制无非就是判断和循环。首先先来看看判断语句。</p>
<h1 id="if判断">if判断</h1>
<p>语法：</p>
<p>if (关系表达式){<br>
语句体;<br>
}else{<br>
语句体;<br>
}</p>
<p>执行流程<br>
首先会判断该表达式结果为true还是flase，如果是true就执行语句体，如果是false则执行else里面的内容。<br>
public static void main(String[] args) {<br>
int a = 1;<br>
if (a==1){<br>
System.out.println(&quot;a:&quot;+a);<br>
}else{<br>
System.out.println(&quot;a!=1&quot;);<br>
}<br>
}</p>
<h1 id="switch选择语句">switch——选择语句</h1>
<p>switch 语句格式：</p>
<p>switch(表达式) {<br>
case 常量值1:<br>
语句体1;<br>
break;<br>
case 常量值2:<br>
语句体2;<br>
break;<br>
...<br>
default:<br>
语句体n+1;<br>
break;<br>
}</p>
<p>执行流程：<br>
首先计算出表达式的值，然后和case依次比较，如果有对应的值，则执行相应的语句，执行完成时遇到break结束。最后如果所有的case值都不匹配就会执行default里面的语句。</p>
<p>public static void main(String[] args) {</p>
<p>int weekday = 6;</p>
<p>switch(weekday) {<br>
case 1:<br>
System.out.println(&quot;星期一&quot;);<br>
break;<br>
case 2:<br>
System.out.println(&quot;星期二&quot;);<br>
break;<br>
case 3:<br>
System.out.println(&quot;星期三&quot;);<br>
break;<br>
case 4:<br>
System.out.println(&quot;星期四&quot;);<br>
break;<br>
case 5:<br>
System.out.println(&quot;星期五&quot;);<br>
break;<br>
case 6:<br>
System.out.println(&quot;星期六&quot;);<br>
break;<br>
case 7:<br>
System.out.println(&quot;星期日&quot;);<br>
break;<br>
default:<br>
System.out.println(&quot;你输入的数字有误&quot;);<br>
break;<br>
}<br>
}</p>
<h1 id="循环语句-for">循环语句-for</h1>
<p>循环语句可以满足在循环条件的情况下，反复执行一段代码。当在达成某个条件的时候必须把循环条件改为flase，让他结束循环，否则就会出现死循环，一直执行下去。</p>
<p>for循环语句格式：</p>
<p>for(初始化表达式;布尔表达式;步进表达式){<br>
循环体；<br>
}</p>
<p>执行流程：<br>
首先初始化一个变量，定义一个表达式和步进表达式，然后循环体执行，如果不满足则继续循环，直到满足布尔表达式的条件则退出循环。</p>
<p>public static void main(String[] args) {<br>
for (int i = 0; i &lt; 20; i++) {<br>
System.out.println(&quot;Hello World&quot;);<br>
}<br>
}<br>
这里打印了20次，也就是说这循环了20次，循环条件为i小于20，每次执行i就会加1，加到20次就满足了布尔表达式的条件，退出循环。<br>
在这里步进表达式必须要写，否则会陷入死循环。</p>
<h1 id="循环语句2while">循环语句2——while</h1>
<p>while循环语句格式：</p>
<p>初始化表达式<br>
while(布尔表达式){<br>
循环体<br>
步进表达式<br>
}<br>
public static void main(String[] args) {<br>
//while循环实现打印10次HelloWorld<br>
//定义初始化变量<br>
int i = 1;<br>
//循环条件&lt;=10<br>
while(i&lt;=10){<br>
System.out.println(&quot;HelloWorld&quot;);<br>
//步进<br>
i++;<br>
}<br>
}</p>
<h1 id="循环语句3-do-while">循环语句3 do-while</h1>
<p>do-while和while很类似，可以说基本用法都是一样的，但唯一不同的是while如果表达式满足的话就直接不会执行了，而do-while是先执行一遍里面的循环体再判断表达式满不满足条件。</p>
<p>do...while格式：</p>
<p>初始化表达式<br>
do{<br>
循环体<br>
步进表达式<br>
}while(布尔表达式);<br>
public static void main(String[] args) {<br>
int x=1;<br>
do {<br>
System.out.println(&quot;HelloWorld&quot;);<br>
x++;<br>
}while(x&lt;=10);<br>
}<br>
do...while循环的特点：无条件执行一次循环体，即使我们将循环条件直接写成false，也依然会循环一次。</p>
<p>这里再来说说for循环和while的区别。</p>
<p>控制条件语句所控制的那个变量，在for循环结束后，就不能再被访问到了，而while循环结束还可以继<br>
续使用，如果想继续使用，就用while，否则推荐使用for。原因是for循环结束，该变量就从内存中消<br>
失，能够提高内存的使用效率。</p>
<p>在已知循环次数的时候使用推荐使用for，循环次数未知的时推荐使用while。</p>
<h1 id="跳出循环语句">跳出循环语句</h1>
<p>break</p>
<p>使用场景：<br>
终结循环或者是选择结构switch</p>
<p>continue</p>
<p>使用场景：结束本次循环，继续下一次的循环</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Javase-Scanner使用]]></title>
        <id>https://haresec.github.io/blog/post/scanner-shi-yong/</id>
        <link href="https://haresec.github.io/blog/post/scanner-shi-yong/">
        </link>
        <updated>2021-12-13T12:31:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="scanner对象">scanner对象</h1>
<p>Java.util.Scanner是Java5新特征，我们可以通过Scanner类来获取用户的输入。</p>
<h1 id="基本语法">基本语法：</h1>
<p>Scanner scanner = new Scanner(System.in);<br>
通过Scanner类的next()与nextLine()方法获取输入的字符串，在读取前我们一般需要使用hasNext()与hasNextLine()判断是否还有输入的数据。<br>
next():<br>
1、一定要读取到有效字符后才可以结束输入<br>
2、对输入有效字符之前遇到的空白，next()方法会自动将其去掉<br>
3、只有输入有效字符才将其后面输入的空白作为分隔符或者结束符<br>
4、next()不能得到带有空格的字符串。</p>
<p>nextLine()：<br>
1、以Enter为结束符，也就是说nextLine()方法返回的是输入回车之前的所有字符<br>
2、可以获得空白。</p>
<p>package com.study.scanner;</p>
<p>import java.util.Scanner;</p>
<p>public class Demo01 {<br>
public static void main(String[] args) {<br>
//创建一个扫描器对象，用于接收键盘数据<br>
Scanner scanner = new Scanner(System.in);<br>
System.out.println(&quot;使用next方式接收：&quot;);<br>
//判断用户有没有输入字符串<br>
if(scanner.hasNext()){<br>
//使用next方式接收<br>
String str = scanner.next();<br>
System.out.println(&quot;输入的内容：&quot;+str);<br>
}<br>
//凡是属于IO流的类如果不关闭会一直占用资源，要养成好习惯用完就关掉<br>
scanner.close();<br>
}<br>
}</p>
<h1 id="接收打印">接收打印</h1>
<p>package com.study.scanner;</p>
<p>import java.util.Scanner;</p>
<p>public class Demo02 {<br>
public static void main(String[] args) {<br>
//从键盘接收数据<br>
Scanner scanner = new Scanner(System.in);<br>
System.out.println(&quot;请输入数据：&quot;);<br>
String str = scanner.nextLine();<br>
System.out.println(&quot;输出内容为：&quot;+str);<br>
scanner.close();<br>
}<br>
}</p>
<h1 id="scanner进阶使用">Scanner进阶使用</h1>
<p>package com.study.scanner;</p>
<p>import java.util.Scanner;</p>
<p>public class Demo04 {<br>
public static void main(String[] args) {<br>
//我们可以输入多个数字，并求其总和平均数，每输入一个数字用回车确认，通过输入非数字来结束输入并输出执行结果：<br>
Scanner scanner = new Scanner(System.in);<br>
//和<br>
double sum = 0;<br>
//计算输入了多少个数字<br>
int m = 0;<br>
System.out.println(&quot;请输入数据：&quot;);<br>
//通过循环判断是否还有输入，并在里面对每一个进行求和统计<br>
while(scanner.hasNextDouble()){<br>
double x = scanner.nextDouble();<br>
m = m + 1;<br>
sum = sum + x;<br>
}<br>
System.out.println(m + &quot;个数的和为&quot; + sum);<br>
System.out.println(m + &quot;个数平均值是&quot; + (sum/m));<br>
scanner.close();<br>
}<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaSE-基础语法]]></title>
        <id>https://haresec.github.io/blog/post/javase/</id>
        <link href="https://haresec.github.io/blog/post/javase/">
        </link>
        <updated>2021-11-17T13:41:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="注释">注释</h1>
<p>单行注释： //注释<br>
多行注释： /<em>注释</em>/<br>
文档注释： /** 文档注释 */<br>
<img src="https://haresec.github.io/blog/post-images/1639363449810.png" alt="" loading="lazy"></p>
<h1 id="标识符与关键字">标识符与关键字</h1>
<p>下图为Java中所有的关键字<br>
所有标字识符必须以大小写母或$或_开头，首字母之后可以用数字<br>
不能使用关键字做变量名或方法名<br>
标识符大小写敏感<br>
<img src="https://haresec.github.io/blog/post-images/1639363462238.png" alt="" loading="lazy"></p>
<h1 id="数据类型">数据类型</h1>
<p>Java是一种强类型语言：要求变量使用要严格符合规定，所有变量必须先定以后才能使用。<br>
Java数据类型分为2大类<br>
基本类型（primitive type）：<br>
1、整数类型： byte占1个字节<br>
​ short占2个字节<br>
​ int 占4个字节 （默认）<br>
​ long占8个字节<br>
2、浮点类型：float占4个字节<br>
​ double占2个字节（默认）<br>
3、字符类型：char占2个字节<br>
4、boolean类型：占1位，true和false<br>
引用类型（reference type）<br>
1、类 class<br>
2、接口 interface<br>
3、数组 array<br>
public class Demo01 {<br>
public static void main(String[] args) {<br>
//八大基本数据类型   定义的变量不赋值则无法使用<br>
byte num1 =10;<br>
short num2 = 20;<br>
int num3 = 30;<br>
long num4 = 40L; //长整型需要在value后面加L</p>
<pre><code>    // 浮点数 float double
    float num5 = 10.1F; //float 类型需要在value后加F
    double num6 = 3.1415926;

    //字符类型
    char name1 = 'A';
    //字符串String不是数据类型也不是关键词而是类，必须用&quot;包裹
    String name2 = &quot;Hellow World!&quot;;

    boolean flag = true;

    System.out.println(num1);
    System.out.println(num2);
    System.out.println(num3);
    System.out.println(num4);
    System.out.println(num5);
    System.out.println(num6);
    System.out.println(name1);
    System.out.println(name2);
    System.out.println(flag);

    }
}
</code></pre>
<h1 id="类型转换">类型转换</h1>
<p>Java是抢类型语言，在进行运算时，不同类型的数据需要先转换为同一类型在进行运算。<br>
<img src="https://haresec.github.io/blog/post-images/1639363474191.png" alt="" loading="lazy"></p>
<p>容量从低到高优先级排序，因为浮点型优先级比整型高，所以float虽然容量小于long，但依然优先级高于long。<br>
从 高 --&gt; 低 需要强制类型转换<br>
从 低 --&gt; 高 自动类型转换<br>
强制类型转换：<br>
类型 变量名 = (目标类型名) 需要强制转换的变量名<br>
public class Demo05 {<br>
public static void main(String[] args) {<br>
// 高 --&gt; 低 ：强制类型转换<br>
int i = 128;<br>
byte b = (byte)i;   //这里输出结果不为128，因为byte最大值为127，此处内存溢出了，类型转换时需注意相应类型的最大容量，避免内存溢出。</p>
<pre><code>    System.out.println(i);
    System.out.println(b);

}
</code></pre>
<p>//输出结果：<br>
128<br>
-128</p>
<p>自动类型转换：<br>
public class Demo05 {<br>
public static void main(String[] args) {<br>
// 低 --&gt; 高 ：自动类型转换<br>
int j = 128;<br>
double c = j;</p>
<pre><code>    System.out.println(j);
    System.out.println(c);
}
</code></pre>
<p>//输出结果：<br>
128<br>
128.0</p>
<p>Ps:<br>
不能对布尔值进行类型转换<br>
不能把对象类型转换为不相干的类型<br>
高容量 --&gt; 低容量 强制类型转换<br>
转换时可能存在内存溢出或精度问题<br>
public class Demo03 {<br>
public static void main(String[] args) {<br>
char c1 = 'a';<br>
char c2 = '中';</p>
<pre><code>    System.out.println(c1);
    System.out.println((int)c1);		//强制类型转换
    System.out.println(c2);
    System.out.println((int)c2);
}
</code></pre>
<p>可以看到进行强制类型转换后输出的为字符对应的ascii值<br>
a<br>
97<br>
中<br>
20013</p>
<h1 id="变量">变量</h1>
<p>Java是强类型语言，每个变量都必须声明其类型<br>
<img src="https://haresec.github.io/blog/post-images/1639363491286.png" alt="" loading="lazy"><br>
变量是Java最基本的存储单元，其要素包含变量名、数据类型、作用域<br>
ps：<br>
每个变量都有类型，类型可以是基本类型（整型、浮点型、字符型、布尔型）也可以是引用类型（类、接口、数组）<br>
变量名必须是合法标识符，也就是必须以大小写字母或$或_开头<br>
声明变量语句注意要以 分号 结束<br>
type varName = [=value] [{,varName[=value]}];<br>
数据类型 变量名 = 值;  //可以使用逗号分隔来同时声明多个变量</p>
<p>变量的作用域<br>
类变量<br>
实例变量<br>
局部变量<br>
public class Demo06 {</p>
<pre><code>//类变量，声明格式类似于实例变量，不过需要加static, 随类的出现和消失而出现和消失。
static double salary = 2500;

//实例变量，在类的里面方法的外面，从属于对象；如不自行初始化，Java会将其值初始化为这个类型的默认值。 0，0.0, 布尔：false, 其余数据类型：null
String name;
int age;

//main方法
public static void main(String[] args) {

    //局部变量，在此方法里面，使用时必须声明和初始化值，不可在其他方法调用。
    int i = 10;
    System.out.println(i);

    //变量类型（Demo06） 变量名（demo06） = 值（new Demo06()）
    Demo06 demo06 = new Demo06();

    System.out.println(demo06.age);
    System.out.println(demo06.name);
    System.out.println(salary);
}

//其他方法
public void add(){

}
</code></pre>
<h1 id="常量">常量</h1>
<p>常量初始化后，常量值不可改变，可理解为特殊的变量<br>
常量名一般使用大写字符<br>
final 常量名 = 常量值;final i = 10;<br>
public class Demo07 {    //修饰符（static、final等）无先后顺序    static final int I = 10;    public static void main(String[] args) {        System.out.println(I);    }}</p>
<p>变量命名规范</p>
<p>修饰符#<br>
static 将方法变为类的方法，被修饰的方法可以在类里直接引用而不需要先创建对象。<br>
public 公有的，如果想让子类也可以使用此属性或方法，需要用public修饰<br>
protected 受保护的，同包不同级，不可以跨包使用<br>
default 默认为default<br>
private 私有的，私有的属性和方法是可以被继承的，但是仅限被类访问，子类一般无法直接调用及访问。一般属性也是私有的<br>
final 通过final修饰得类没有子类<br>
运算符#</p>
<p>% 模 取余运算instanceof==实例注意a++与++a的区别，a++先赋值再+1，++a先+1再赋值<br>
package operator;<br>
public class Demo2 {public static void main(String[] args) {<br>
long a = 123123123123123123L;<br>
int b = 123;<br>
short c = 10;<br>
byte d = 8; // 返回结果为操作数中最高位<br>
System.out.println(a+b+c+d);<br>
System.out.println(b+c+d);<br>
System.out.println(c+d);<br>
}<br>
}12312312312312326414118</p>
<p>当操作数中有long，则返回值类型为long；操作数中无long时，返回结果为操作数中最高位<br>
自增自减运算符、Math类#<br>
Java.lang下的包不需要导入<br>
package operator;<br>
public class Demo3 {<br>
public static void main(String[] args) {<br>
int a = 3;    //先赋值再+1<br>
int b = a++;  //先+1再赋值<br>
int c = ++a;<br>
System.out.println(a);<br>
System.out.println(b);<br>
System.out.println(c);  //java.lang下的包不需要导入；<br>
double pow = new Math.pow(2,3);<br>
System.out.println(pow);    }}</p>
<h1 id="逻辑运算符">逻辑运算符</h1>
<p>package operator;<br>
public class Demo03 {<br>
public static void main(String[] args) {<br>
//与（and）    或(or)   非（取反）<br>
boolean a = true;<br>
boolean b = false;<br>
System.out.println(&quot;a &amp;&amp; b:&quot;+(a &amp;&amp; b));<br>
System.out.println(&quot;a | b:&quot;+(a || b));<br>
System.out.println(&quot;!(a &amp;&amp; b:)&quot;+(!(a &amp;&amp; b)));<br>
//短路运算<br>
int c = 5;<br>
boolean d = (c&lt;4)&amp;&amp;(c++&lt;4);<br>
System.out.println(d);<br>
System.out.println(c);<br>
}<br>
}</p>
<h1 id="位运算符">位运算符</h1>
<p>package operator;</p>
<h2 id="public-class-demo04-public-static-void-mainstring-args-a-0011-1100b-0000-1101">public class Demo04 {<br>
public static void main(String[] args) {<br>
/*<br>
A = 0011 1100<br>
b = 0000 1101</h2>
<pre><code>  A&amp;B = 0000 1100   &quot;&amp;&quot;如果相对应位都是1，则结果为1，否则为0
  A|B = 0011 1101   &quot;|&quot;如果对应位都是0，则结果为0，否则为1
  A^B = 0011 0001   “^”如果相同为0，否则为1
   ~B = 1111 0010   取反
</code></pre>
<hr>
<pre><code>   2*8 = 16
   &lt;&lt;   *2
   &gt;&gt;   *2
   0000 0000    0
   0000 0001    1
   0000 0010    2
   0000 0011    3
   0000 0100    4
   0000 1000    8
   0001 0000    16
     */
    System.out.println(2&lt;&lt;3);
}
</code></pre>
<p>}</p>
<h1 id="java包机制">Java包机制#</h1>
<p>包可以理解为一个文件夹<br>
为了更好的组织类，Java提供了包机制，用于区别类名的命名空间。<br>
语法：<br>
package pkg1[.pkg2[.pkg3...]];</p>
<p>一般利用公司域名倒置作为包名<br>
例如：com.baidu.www<br>
为了能够使用某一个包的成员，我们需要在Java程序中明确导入该包。<br>
import package1[.package2...].(classname|*);</p>
<p>import语句必须在package语句下面，不然会报错<br>
IDEA默认开启了Compact Middle Packages,需要取消勾选才可一次性生成多级package<br>
<img src="https://haresec.github.io/blog/post-images/1639363440257.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>