<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://haresec.github.io/blog</id>
    <title></title>
    <updated>2021-12-13T12:37:47.297Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://haresec.github.io/blog"/>
    <link rel="self" href="https://haresec.github.io/blog/atom.xml"/>
    <logo>https://haresec.github.io/blog/images/avatar.png</logo>
    <icon>https://haresec.github.io/blog/favicon.ico</icon>
    <rights>All rights reserved 2021, </rights>
    <entry>
        <title type="html"><![CDATA[Scanner使用]]></title>
        <id>https://haresec.github.io/blog/post/scanner-shi-yong/</id>
        <link href="https://haresec.github.io/blog/post/scanner-shi-yong/">
        </link>
        <updated>2021-12-13T12:31:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="scanner对象">scanner对象</h1>
<p>Java.util.Scanner是Java5新特征，我们可以通过Scanner类来获取用户的输入。</p>
<h1 id="基本语法">基本语法：</h1>
<p>Scanner scanner = new Scanner(System.in);<br>
通过Scanner类的next()与nextLine()方法获取输入的字符串，在读取前我们一般需要使用hasNext()与hasNextLine()判断是否还有输入的数据。<br>
next():<br>
1、一定要读取到有效字符后才可以结束输入<br>
2、对输入有效字符之前遇到的空白，next()方法会自动将其去掉<br>
3、只有输入有效字符才将其后面输入的空白作为分隔符或者结束符<br>
4、next()不能得到带有空格的字符串。</p>
<p>nextLine()：<br>
1、以Enter为结束符，也就是说nextLine()方法返回的是输入回车之前的所有字符<br>
2、可以获得空白。</p>
<p>package com.study.scanner;</p>
<p>import java.util.Scanner;</p>
<p>public class Demo01 {<br>
public static void main(String[] args) {<br>
//创建一个扫描器对象，用于接收键盘数据<br>
Scanner scanner = new Scanner(System.in);<br>
System.out.println(&quot;使用next方式接收：&quot;);<br>
//判断用户有没有输入字符串<br>
if(scanner.hasNext()){<br>
//使用next方式接收<br>
String str = scanner.next();<br>
System.out.println(&quot;输入的内容：&quot;+str);<br>
}<br>
//凡是属于IO流的类如果不关闭会一直占用资源，要养成好习惯用完就关掉<br>
scanner.close();<br>
}<br>
}</p>
<h1 id="接收打印">接收打印</h1>
<p>package com.study.scanner;</p>
<p>import java.util.Scanner;</p>
<p>public class Demo02 {<br>
public static void main(String[] args) {<br>
//从键盘接收数据<br>
Scanner scanner = new Scanner(System.in);<br>
System.out.println(&quot;请输入数据：&quot;);<br>
String str = scanner.nextLine();<br>
System.out.println(&quot;输出内容为：&quot;+str);<br>
scanner.close();<br>
}<br>
}</p>
<h1 id="scanner进阶使用">Scanner进阶使用</h1>
<p>package com.study.scanner;</p>
<p>import java.util.Scanner;</p>
<p>public class Demo04 {<br>
public static void main(String[] args) {<br>
//我们可以输入多个数字，并求其总和平均数，每输入一个数字用回车确认，通过输入非数字来结束输入并输出执行结果：<br>
Scanner scanner = new Scanner(System.in);<br>
//和<br>
double sum = 0;<br>
//计算输入了多少个数字<br>
int m = 0;<br>
System.out.println(&quot;请输入数据：&quot;);<br>
//通过循环判断是否还有输入，并在里面对每一个进行求和统计<br>
while(scanner.hasNextDouble()){<br>
double x = scanner.nextDouble();<br>
m = m + 1;<br>
sum = sum + x;<br>
}<br>
System.out.println(m + &quot;个数的和为&quot; + sum);<br>
System.out.println(m + &quot;个数平均值是&quot; + (sum/m));<br>
scanner.close();<br>
}<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaSE-基础语法]]></title>
        <id>https://haresec.github.io/blog/post/javase/</id>
        <link href="https://haresec.github.io/blog/post/javase/">
        </link>
        <updated>2021-11-17T13:41:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="注释">注释#</h1>
<p>单行注释： //注释<br>
多行注释： /<em>注释</em>/<br>
文档注释： /** 文档注释 */<br>
<img src="https://haresec.github.io/blog/post-images/1639363449810.png" alt="" loading="lazy"></p>
<h1 id="标识符与关键字">标识符与关键字#</h1>
<p>下图为Java中所有的关键字<br>
所有标字识符必须以大小写母或$或_开头，首字母之后可以用数字<br>
不能使用关键字做变量名或方法名<br>
标识符大小写敏感<br>
<img src="https://haresec.github.io/blog/post-images/1639363462238.png" alt="" loading="lazy"></p>
<h1 id="数据类型">数据类型#</h1>
<p>Java是一种强类型语言：要求变量使用要严格符合规定，所有变量必须先定以后才能使用。<br>
Java数据类型分为2大类<br>
基本类型（primitive type）：<br>
1、整数类型： byte占1个字节<br>
​ short占2个字节<br>
​ int 占4个字节 （默认）<br>
​ long占8个字节<br>
2、浮点类型：float占4个字节<br>
​ double占2个字节（默认）<br>
3、字符类型：char占2个字节<br>
4、boolean类型：占1位，true和false<br>
引用类型（reference type）<br>
1、类 class<br>
2、接口 interface<br>
3、数组 array<br>
public class Demo01 {<br>
public static void main(String[] args) {<br>
//八大基本数据类型   定义的变量不赋值则无法使用<br>
byte num1 =10;<br>
short num2 = 20;<br>
int num3 = 30;<br>
long num4 = 40L; //长整型需要在value后面加L</p>
<pre><code>    // 浮点数 float double
    float num5 = 10.1F; //float 类型需要在value后加F
    double num6 = 3.1415926;

    //字符类型
    char name1 = 'A';
    //字符串String不是数据类型也不是关键词而是类，必须用&quot;包裹
    String name2 = &quot;Hellow World!&quot;;

    boolean flag = true;

    System.out.println(num1);
    System.out.println(num2);
    System.out.println(num3);
    System.out.println(num4);
    System.out.println(num5);
    System.out.println(num6);
    System.out.println(name1);
    System.out.println(name2);
    System.out.println(flag);

    }
}
</code></pre>
<h1 id="类型转换">类型转换#</h1>
<p>Java是抢类型语言，在进行运算时，不同类型的数据需要先转换为同一类型在进行运算。<br>
<img src="https://haresec.github.io/blog/post-images/1639363474191.png" alt="" loading="lazy"></p>
<p>容量从低到高优先级排序，因为浮点型优先级比整型高，所以float虽然容量小于long，但依然优先级高于long。<br>
从 高 --&gt; 低 需要强制类型转换<br>
从 低 --&gt; 高 自动类型转换<br>
强制类型转换：<br>
类型 变量名 = (目标类型名) 需要强制转换的变量名<br>
public class Demo05 {<br>
public static void main(String[] args) {<br>
// 高 --&gt; 低 ：强制类型转换<br>
int i = 128;<br>
byte b = (byte)i;   //这里输出结果不为128，因为byte最大值为127，此处内存溢出了，类型转换时需注意相应类型的最大容量，避免内存溢出。</p>
<pre><code>    System.out.println(i);
    System.out.println(b);

}
</code></pre>
<p>//输出结果：<br>
128<br>
-128</p>
<p>自动类型转换：<br>
public class Demo05 {<br>
public static void main(String[] args) {<br>
// 低 --&gt; 高 ：自动类型转换<br>
int j = 128;<br>
double c = j;</p>
<pre><code>    System.out.println(j);
    System.out.println(c);
}
</code></pre>
<p>//输出结果：<br>
128<br>
128.0</p>
<p>Ps:<br>
不能对布尔值进行类型转换<br>
不能把对象类型转换为不相干的类型<br>
高容量 --&gt; 低容量 强制类型转换<br>
转换时可能存在内存溢出或精度问题<br>
public class Demo03 {<br>
public static void main(String[] args) {<br>
char c1 = 'a';<br>
char c2 = '中';</p>
<pre><code>    System.out.println(c1);
    System.out.println((int)c1);		//强制类型转换
    System.out.println(c2);
    System.out.println((int)c2);
}
</code></pre>
<p>可以看到进行强制类型转换后输出的为字符对应的ascii值<br>
a<br>
97<br>
中<br>
20013</p>
<h1 id="变量">变量#</h1>
<p>Java是强类型语言，每个变量都必须声明其类型<br>
<img src="https://haresec.github.io/blog/post-images/1639363491286.png" alt="" loading="lazy"><br>
变量是Java最基本的存储单元，其要素包含变量名、数据类型、作用域<br>
ps：<br>
每个变量都有类型，类型可以是基本类型（整型、浮点型、字符型、布尔型）也可以是引用类型（类、接口、数组）<br>
变量名必须是合法标识符，也就是必须以大小写字母或$或_开头<br>
声明变量语句注意要以 分号 结束<br>
type varName = [=value] [{,varName[=value]}];<br>
数据类型 变量名 = 值;  //可以使用逗号分隔来同时声明多个变量</p>
<p>变量的作用域<br>
类变量<br>
实例变量<br>
局部变量<br>
public class Demo06 {</p>
<pre><code>//类变量，声明格式类似于实例变量，不过需要加static, 随类的出现和消失而出现和消失。
static double salary = 2500;

//实例变量，在类的里面方法的外面，从属于对象；如不自行初始化，Java会将其值初始化为这个类型的默认值。 0，0.0, 布尔：false, 其余数据类型：null
String name;
int age;

//main方法
public static void main(String[] args) {

    //局部变量，在此方法里面，使用时必须声明和初始化值，不可在其他方法调用。
    int i = 10;
    System.out.println(i);

    //变量类型（Demo06） 变量名（demo06） = 值（new Demo06()）
    Demo06 demo06 = new Demo06();

    System.out.println(demo06.age);
    System.out.println(demo06.name);
    System.out.println(salary);
}

//其他方法
public void add(){

}
</code></pre>
<h1 id="常量">常量#</h1>
<p>常量初始化后，常量值不可改变，可理解为特殊的变量<br>
常量名一般使用大写字符<br>
final 常量名 = 常量值;final i = 10;<br>
public class Demo07 {    //修饰符（static、final等）无先后顺序    static final int I = 10;    public static void main(String[] args) {        System.out.println(I);    }}</p>
<p>变量命名规范</p>
<p>修饰符#<br>
static 将方法变为类的方法，被修饰的方法可以在类里直接引用而不需要先创建对象。<br>
public 公有的，如果想让子类也可以使用此属性或方法，需要用public修饰<br>
protected 受保护的，同包不同级，不可以跨包使用<br>
default 默认为default<br>
private 私有的，私有的属性和方法是可以被继承的，但是仅限被类访问，子类一般无法直接调用及访问。一般属性也是私有的<br>
final 通过final修饰得类没有子类<br>
运算符#</p>
<p>% 模 取余运算instanceof==实例注意a++与++a的区别，a++先赋值再+1，++a先+1再赋值<br>
package operator;<br>
public class Demo2 {public static void main(String[] args) {<br>
long a = 123123123123123123L;<br>
int b = 123;<br>
short c = 10;<br>
byte d = 8; // 返回结果为操作数中最高位<br>
System.out.println(a+b+c+d);<br>
System.out.println(b+c+d);<br>
System.out.println(c+d);<br>
}<br>
}12312312312312326414118</p>
<p>当操作数中有long，则返回值类型为long；操作数中无long时，返回结果为操作数中最高位<br>
自增自减运算符、Math类#<br>
Java.lang下的包不需要导入<br>
package operator;<br>
public class Demo3 {<br>
public static void main(String[] args) {<br>
int a = 3;    //先赋值再+1<br>
int b = a++;  //先+1再赋值<br>
int c = ++a;<br>
System.out.println(a);<br>
System.out.println(b);<br>
System.out.println(c);  //java.lang下的包不需要导入；<br>
double pow = new Math.pow(2,3);<br>
System.out.println(pow);    }}</p>
<h1 id="逻辑运算符">逻辑运算符</h1>
<p>package operator;<br>
public class Demo03 {<br>
public static void main(String[] args) {<br>
//与（and）    或(or)   非（取反）<br>
boolean a = true;<br>
boolean b = false;<br>
System.out.println(&quot;a &amp;&amp; b:&quot;+(a &amp;&amp; b));<br>
System.out.println(&quot;a | b:&quot;+(a || b));<br>
System.out.println(&quot;!(a &amp;&amp; b:)&quot;+(!(a &amp;&amp; b)));<br>
//短路运算<br>
int c = 5;<br>
boolean d = (c&lt;4)&amp;&amp;(c++&lt;4);<br>
System.out.println(d);<br>
System.out.println(c);<br>
}<br>
}</p>
<h1 id="位运算符">位运算符</h1>
<p>package operator;</p>
<h2 id="public-class-demo04-public-static-void-mainstring-args-a-0011-1100b-0000-1101">public class Demo04 {<br>
public static void main(String[] args) {<br>
/*<br>
A = 0011 1100<br>
b = 0000 1101</h2>
<pre><code>  A&amp;B = 0000 1100   &quot;&amp;&quot;如果相对应位都是1，则结果为1，否则为0
  A|B = 0011 1101   &quot;|&quot;如果对应位都是0，则结果为0，否则为1
  A^B = 0011 0001   “^”如果相同为0，否则为1
   ~B = 1111 0010   取反
</code></pre>
<hr>
<pre><code>   2*8 = 16
   &lt;&lt;   *2
   &gt;&gt;   *2
   0000 0000    0
   0000 0001    1
   0000 0010    2
   0000 0011    3
   0000 0100    4
   0000 1000    8
   0001 0000    16
     */
    System.out.println(2&lt;&lt;3);
}
</code></pre>
<p>}</p>
<h1 id="java包机制">Java包机制#</h1>
<p>包可以理解为一个文件夹<br>
为了更好的组织类，Java提供了包机制，用于区别类名的命名空间。<br>
语法：<br>
package pkg1[.pkg2[.pkg3...]];</p>
<p>一般利用公司域名倒置作为包名<br>
例如：com.baidu.www<br>
为了能够使用某一个包的成员，我们需要在Java程序中明确导入该包。<br>
import package1[.package2...].(classname|*);</p>
<p>import语句必须在package语句下面，不然会报错<br>
IDEA默认开启了Compact Middle Packages,需要取消勾选才可一次性生成多级package<br>
<img src="https://haresec.github.io/blog/post-images/1639363440257.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>